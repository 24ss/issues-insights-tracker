name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: issues_db
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/issues_db
      SECRET_KEY: dummy
      GOOGLE_CLIENT_ID: dummy.apps.googleusercontent.com

    steps:
    - uses: actions/checkout@v4

    # ─── BACKEND TESTS ───────────────────────────────────────────────
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install backend deps
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run Pytest
      run: |
        cd backend
        pytest --cov=app --cov-report=xml -q
    - uses: codecov/codecov-action@v4
      with:
        files: ./backend/coverage.xml
        flags: backend

    # ─── FRONTEND E2E ────────────────────────────────────────────────
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend deps
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps

    - name: Start backend & frontend
      run: |
        docker compose up -d api
        cd frontend
        npm run build && npm run preview &
        sleep 15          # give servers time to start
      shell: bash

    - name: Run Playwright tests
      run: |
        cd frontend
        npx playwright test
      env:
        BASE_URL: http://localhost:4173    # vite preview default

  # ─── OPTIONAL DOCKER BUILD (just ensures Dockerfile stays green) ──
  build-image:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Build backend image
      run: docker build -t tracker-api -f Dockerfile .
